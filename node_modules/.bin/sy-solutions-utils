#!/usr/bin/env node

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const process_1 = __importDefault(require("process"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const yargs_1 = __importDefault(require("yargs/yargs"));
const YamlToUrlEncoder_1 = __importDefault(require("../src/YamlToUrlEncoder"));
const COMPRESS = 'compress';
const DECOMPRESS = 'decompress';
/**
 * A Node.js script to compress/decompress a YAML string or file to/from a base64 URL-safe string.
 * The script can take the YAML from a provided file or a string input.
 * An additional output-type parameter can be provided, which outputs a URL when combined with the 'compress' operation. Defaults to 'base64'.
 * An additional base-url parameter can be provided, which is used to create the URL when combined with the 'compress' operation.
 *
 * @param {object} argv - The arguments passed to the script.
 *
 * @example
 * // Compressing YAML data from a string and getting the output in base64 format:
 * node script.js "data: hello world" --compress --output-type base64
 *
 * @example
 * // Decompressing YAML data from a base64 string:
 * node script.js "eJyLjgUAARUAuQ==" --decompress
 *
 * @example
 * // Compressing YAML data from a file and getting the output as a URL:
 * node script.js /path/to/input.yaml --compress --output-type url --base-url "https://example.com/"
 *
 * @example
 * // Compressing YAML data from a file and using the default base URL:
 * node script.js /path/to/input.yaml --compress
 *
 */
async function main(argv) {
    const input = argv.input;
    const outputType = argv['output-type'];
    const baseURL = argv['base-url'];
    let operation;
    if (argv.compress) {
        operation = COMPRESS;
    }
    else if (argv.decompress) {
        operation = DECOMPRESS;
    }
    errorOnInvalidArgs(input, operation, outputType, baseURL);
    const isFile = path_1.default.extname(input);
    const isURLOutput = outputType === 'url';
    const isVerbose = argv.verbose;
    if (isVerbose) {
        console.log('Operation:', operation);
        console.log('Input type:', isFile ? 'file' : 'string');
        console.log('Output type:', isURLOutput ? 'url' : 'base64');
    }
    const encoder = new YamlToUrlEncoder_1.default();
    try {
        if (operation === COMPRESS) {
            const outputLabel = isURLOutput ? 'URL:' : 'Base64:';
            let output;
            let base64;
            if (isFile) {
                const yamlString = fs_1.default.readFileSync(input, 'utf-8');
                base64 = encoder.convertToCompressedBase64(yamlString);
            }
            else {
                base64 = encoder.convertToCompressedBase64(input);
            }
            if (isURLOutput) {
                output = encoder.createUrl(base64, baseURL);
            }
            else {
                output = base64;
            }
            if (isVerbose) {
                console.log(outputLabel, output);
            }
            else {
                console.log(output);
            }
        }
        if (operation === DECOMPRESS) {
            let yamlString;
            if (isFile) {
                const encoded = fs_1.default.readFileSync(input, 'utf-8');
                yamlString = encoder.convertFromCompressedBase64(encoded);
            }
            else {
                yamlString = encoder.convertFromCompressedBase64(input);
            }
            if (isVerbose) {
                console.log('YAML:', yamlString);
            }
            else {
                console.log(yamlString);
            }
        }
    }
    catch (err) {
        console.error('An error occurred:', err);
    }
}
function errorOnInvalidArgs(input, operation, outputType, baseURL) {
    if (!input) {
        console.error('Error: Input of a string or filepath is required.');
        process_1.default.exit(1);
    }
    if (!operation) {
        console.error('Error: Operation is required. Valid operations are "compress" and "decompress".');
        process_1.default.exit(1);
    }
    const outputTypes = ['base64', 'url'];
    if (operation === COMPRESS && outputType && !outputTypes.includes(outputType)) {
        console.error('Error: Invalid output type. Valid output types are "base64" and "url".');
        process_1.default.exit(1);
    }
    if (!!baseURL) {
        try {
            new URL(baseURL);
        }
        catch {
            console.error('Error: Invalid base URL.');
            process_1.default.exit(1);
        }
    }
}
const argv = (0, yargs_1.default)(process_1.default.argv.slice(2))
    .command('$0 <input>', 'Compress or decompress YAML', yargs => {
    yargs.positional('input', {
        describe: 'The input to process, either a YAML string or a path to a YAML file',
        type: 'string',
    });
})
    .option('compress', {
    alias: 'c',
    describe: 'Compress a YAML file or string to URL-safe base64',
    type: 'boolean',
})
    .option('decompress', {
    alias: 'd',
    describe: 'Decompress a base64 string to YAML',
    type: 'boolean',
})
    .option('output-type', {
    alias: 'o',
    describe: 'The type of output to be returned',
    choices: ['base64', 'url'],
    default: 'base64',
})
    .option('base-url', {
    alias: 'b',
    describe: 'The base URL to use',
    default: 'https://app.shipyardapp.com/',
})
    .option('verbose', {
    alias: 'v',
    describe: 'Display verbose output',
    type: 'boolean',
    default: false,
})
    .help()
    .parseSync();
main(argv);
